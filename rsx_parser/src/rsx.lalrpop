use crate::lexer::{
  LexicalError, 
};
use crate::parser::Token;
use crate::ast::{Values, AttributeSet, Element, Node, RsxCall};

grammar<'input>(input: &'input str);

pub Rsx: RsxCall<'input> = {
    "rsx!" "{" <(NodeConstructor)*> "}" => RsxCall(<>),
};

Comma<T>: Vec<T> = {
    <mut v: (<T> ",")*> <e: T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

NodeConstructor: Node<'input> = {
    ElementConstructor => Node::Element(<>),
    <"val"> ","? => Node::Text(<>),
}

ElementConstructor: Element<'input> = {
    <tag: "el"> <attributes: Comma<AttributeSetter>> <children:(NodeConstructor)*> "}" ","? => {
        Element {
            tag,
            attributes,
            children,
        }
    }
}

AttributeSetter: AttributeSet<'input> = {
    <a: "attr"> <v: "val"> => AttributeSet {
        name: a,
        value: v,
    },
}

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        "attr" => Token::Attribute(<&'static str>),
        "el" => Token::Element(<&'input str>),
        "val" => Token::Values(<Values<'input>>),
        "{" => Token::OpeningBrace,
        "}" => Token::ClosingBrace,
        "?" => Token::QuestionMark,
        "#" => Token::Pound,
        "," => Token::Comma,
        "rsx!" => Token::Rsx,
    }
}